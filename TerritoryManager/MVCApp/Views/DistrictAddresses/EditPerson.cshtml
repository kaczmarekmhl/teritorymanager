@model MVCApp.Models.Person

@{
    ViewBag.Title = "Edytuj adres";

    string displayDateFormat = @"dd-MM-yyyy";
    string serverDateTimeFormat = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
    string javascriptDateFormat = serverDateTimeFormat.Replace("MM", "mm").Replace("yyyy", "yy");

    if (!Model.DoNotVisitReportDate.HasValue)
    {
        Model.DoNotVisitReportDate = DateTime.Today;
    }
}

<h2>Edytuj adres</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Congregation</legend>

        @Html.HiddenFor(model => model.Id)

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Name, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Lastname)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Lastname, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Lastname)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.StreetAddress)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.StreetAddress, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.StreetAddress)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.TelephoneNumber)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.TelephoneNumber)
            @Html.ValidationMessageFor(model => model.TelephoneNumber)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Remarks)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Remarks)
            @Html.ValidationMessageFor(model => model.Remarks)
        </div>

        <div class="personDoNotVisit">
            <div class="editor-label">
                @Html.EditorFor(model => model.DoNotVisit) @Html.LabelFor(model => model.DoNotVisit, new { style = "display:inline-block" })
            </div>

            <div id="doNotVisitReportDateWrapper">
                <div class="editor-label">
                    @Html.LabelFor(model => model.DoNotVisitReportDate, new { @class = "small" })
                </div>
                <div class="editor-field">
                    <input type="text" id="displayDate" value="@Model.DoNotVisitReportDate.Value.ToString(displayDateFormat)" />
                    <input type="hidden" id="altDate" name="DoNotVisitReportDate" value="@Model.DoNotVisitReportDate.Value.ToString(serverDateTimeFormat)" />
                </div>
            </div>
        </div>

        <div class="otherPublisherVisiting">
            <div class="editor-label">
                @Html.EditorFor(model => model.IsVisitedByOtherPublisher) @Html.LabelFor(model => model.IsVisitedByOtherPublisher, new { style = "display:inline-block" })
            </div>

            <div id="visitingPublisherWrapper">
                <div class="editor-label">
                    @Html.LabelFor(model => model.VisitingPublisher, new { @class = "small"})
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.VisitingPublisher)
                    @Html.ValidationMessageFor(model => model.VisitingPublisher)
                </div>
            </div>
        </div>
        <p>
            <input type="submit" value="@Strings.Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink(Strings.BackToList, "Index", new { id = Model.District.Id })
</div>

<script>

    function setDoNotVisitState() {
        if (!$('#DoNotVisit').is(':checked')) {
            $('#displayDate').prop('disabled', true);
            $('#doNotVisitReportDateWrapper').hide();
        }
        else {
            $('#displayDate').prop('disabled', false);
            $('#doNotVisitReportDateWrapper').show();
        }
    }

    function setIsVisitedByOtherPublisherState() {
        if (!$('#IsVisitedByOtherPublisher').is(':checked')) {
            $('#visitingPublisherWrapper').hide();
        }
        else {
            $('#visitingPublisherWrapper').show();
        }
    }

    $(function () {
        $('#displayDate').datepicker({
            dateFormat: 'dd-mm-yy',
            altFormat: "@javascriptDateFormat",
            altField: "#altDate"
        });

        setDoNotVisitState();
        setIsVisitedByOtherPublisherState();

        $('#DoNotVisit').click(function () {
            setDoNotVisitState();
        });

        $('#IsVisitedByOtherPublisher').click(function () {
            setIsVisitedByOtherPublisherState();
        });
    });

</script>