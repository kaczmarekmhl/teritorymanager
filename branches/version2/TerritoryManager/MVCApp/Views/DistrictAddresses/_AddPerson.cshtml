@model MVCApp.Models.Person

@{
    int districtId = ViewBag.DistrictId;
    string districtName = ViewBag.DistrictName;

    Model.PostCode = ViewBag.DistrictPostCode;
}

<div id="addPersonWrapper" class="clear-fix" style="display:none">

    <div id="addPersonMap" class="float-right">
        <div class="addPersonMapCanvas"></div>
    </div>

    <div id="addPersonFormWrapper" class="float-left">
        @using (Ajax.BeginForm("AddPerson", null, new AjaxOptions { 
            OnBegin = "validatePerson",     
            OnSuccess = "personAdded",
            LoadingElementId = "ajaxLoader"},
            new { id = "addPersonForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <fieldset>
                <legend>Add person</legend>

                <div class="editor-label">
                    <label>@Strings.PersonNameSurname</label>
                </div>
                <div class="editor-field">
                    <input id="NameSurname" type="text"/>
                </div>

                @Html.HiddenFor(model => model.District.Id, new { Value = districtId })
                @Html.HiddenFor(model => model.Name)
                @Html.HiddenFor(model => model.Lastname)
                @Html.HiddenFor(model => model.Latitude, new { data_geo = "lat" })
                @Html.HiddenFor(model => model.Longitude, new { data_geo = "lng" })
                @Html.HiddenFor(model => model.PostCode, new { data_geo = "postal_code" })
                @Html.HiddenFor(model => model.StreetAddress)
        
                <input id="Route" name="Route" type="hidden" data-geo="route">
                <input id="StreetNumber" name="StreetNumber" type="hidden" data-geo="street_number">

                <div class="editor-label">
                    @Html.LabelFor(model => model.StreetAddress)
                </div>
                <input id="geocomplete" type="text" placeholder="@Strings.AutocompleteAddressEnterLocation" />
                <span class="field-validation-error" hidden="hidden" id="GeoCompleteValidationError"></span>
                <input id="StreetNumberDetails" type="text" placeholder="@Strings.AutocompleteAddressEnterLocationDetails" />

                <div class="editor-label">
                    @Html.LabelFor(model => model.TelephoneNumber)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.TelephoneNumber)
                    @Html.ValidationMessageFor(model => model.TelephoneNumber)
                </div>

                <p>
                    <input type="submit" value="Dodaj" />
                    <span id="addPersonInfoMessage" class="infoMessage" style="display:none"></span>
                </p>
                
            </fieldset>
        }
    </div>

    

    
 
</div>

@{
    string country = "";
    
    if(ViewBag.DistrictCountry == MVCApp.Enums.Country.Denmark)
    {
        country = "dk";
    }
    else  if(ViewBag.DistrictCountry == MVCApp.Enums.Country.Norway)
    {
        country = "no";
    }
}

<script>

    var geoCompleteEnabled = false;

    //Needed to keep street addres in sync with all fields
    $("#addPersonForm input[type='text']").focusout(function () {
        updateFields();
    })

    $("#AddPersonButton").click(function () {
        $("#addPersonWrapper").toggle();

        if (!geoCompleteEnabled) {
            enableGeoComplete();
            geoCompleteEnabled = false;
        }

    })

    function validatePerson(ajaxContext) {    
        if (validateAddress()) {
            setFormEnabled(false);
            return true;
        }
        else {
            return false;
        }
    }

    function validateAddress() {

        $("#GeoCompleteValidationError").text("");
        $("#GeoCompleteValidationError").hide();

        if ($("#Route").val() == '') {
            $("#GeoCompleteValidationError").text("Podaj nazwę ulicy");
            $("#GeoCompleteValidationError").show();

            return false;
        }
        else if ($("#StreetNumber").val() == '') {
            $("#GeoCompleteValidationError").text("Podaj numer ulicy");
            $("#GeoCompleteValidationError").show();

            return false;
        }
        else if ($("input[data-geo='lat']").val() == '' || $("input[data-geo='lng']").val() == '') {
            $("#GeoCompleteValidationError").text("Nie można określić lokalizacji adresu. Wpisz ponownie dokładny adres.");
            $("#GeoCompleteValidationError").show();

            return false;
        }

        return true;
    }

    function personAdded(ajaxContext) {

        var fadeOutTime = 6000;

        //Add new person to person list table
        $("#personList table tr").eq(0).after(ajaxContext);

        //Highlight newly added row
        $("#personList table tr").eq(1).effect("highlight", {}, fadeOutTime);

        //Add info message
        $("#addPersonInfoMessage").text("@Strings.PersonAddSuccess").show(0).delay(fadeOutTime).hide(0);
        
        resetForm();
        setFormEnabled(true);
    }

    function resetForm() {
        $("#addPersonForm").find("input[type='text']").val("");
        $("#Route").val('');
    }

    function setFormEnabled(enabled) {
        if (enabled == false) {
            $("#addPersonForm").find("input[type='text'], input[type='submit']").attr('disabled', 'disabled');
        }
        else {
            $("#addPersonForm").find("input[type='text'], input[type='submit']").removeAttr('disabled');
        }
    }

    function updateFields() {

        //Name and Lastname
        var nameElements = $("#NameSurname").val().split(" ");

        $("#Lastname").val(nameElements.pop());
        $("#Name").val(nameElements.join(" "));

        //Street address
        $("#StreetAddress").val($("#Route").val() + ' ' + $("#StreetNumber").val());

        if ($("#StreetNumberDetails").val()) {
            $("#StreetAddress").val($("#StreetAddress").val() + ', ' + $("#StreetNumberDetails").val())
        }

    }

</script>

<script src="http://maps.googleapis.com/maps/api/js?libraries=places&sensor=false"></script>
@Scripts.Render("~/bundles/jquery.geocomplete")
<script type="text/javascript" src="~/Scripts/geoxml3.js"></script>

<script>
      function enableGeoComplete(){

        //setup geo-autocomplete input
        $("#geocomplete").geocomplete({
          map: ".addPersonMapCanvas",
          types: ['address'],
          country: '@country' ,
          details:"#addPersonForm",
          detailsAttribute: "data-geo"
        });

        $("#geocomplete").bind(
            "geocode:result",
            function (event, result)
            {
                updateFields();
                validateAddress();
            })

        //Add map to geo-autocomplete
        var map = $("#geocomplete").geocomplete("map");
        map.setCenter(new google.maps.LatLng(56.0000, 12.0000));
        map.setZoom(7);

        //Display district boundary
        var myParser = new geoXML3.parser({
            map: map,
            zoom: true,
            singleInfoWindow: true
        });
        myParser.parse('@Url.Action("MapKml", "District", new { id = ViewBag.DistrictId })');

      }
</script>